// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - synced with Clerk
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique // Clerk user ID
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  subscription           Subscription?
  contacts               Contact[]
  campaigns              Campaign[]
  conversations          Conversation[]
  analytics              Analytics[]
  emailTemplates         EmailTemplate[]
  rejectedLeads          RejectedLead[]
  connectedEmailAccounts ConnectedEmailAccount[]
  accountSyncStates      AccountSyncState[]

  @@map("users")
}

// Subscription model - synced with Stripe
model Subscription {
  id                   String               @id @default(cuid())
  stripeCustomerId     String               @unique
  stripeSubscriptionId String               @unique
  stripePriceId        String
  status               SubscriptionStatus
  plan                 Plan
  interval             BillingInterval
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  trialStart           DateTime?
  trialEnd             DateTime?
  cancelAtPeriodEnd    Boolean              @default(false)
  canceledAt           DateTime?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt

  // Relationships
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Contact model - for lead management
model Contact {
  id             String        @id @default(cuid())
  name           String
  email          String
  company        String?
  position       String?
  source         ContactSource @default(MANUAL)
  status         ContactStatus @default(COLD)
  lastContacted  DateTime?
  tags           String[]      @default([])
  notes          String?
  linkedinUrl    String?
  phoneNumber    String?
  domainStatus   String        @default("unknown") // "active", "parked", "does_not_resolve", "unknown"
  lastDomainValidated DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relationships
  userId           String
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations    Conversation[]
  campaignContacts CampaignContact[]  // Campaign assignments
  campaignEvents   CampaignEvent[]    // Activity tracking

  @@map("contacts")
}

// Campaign model - enhanced for multi-channel outreach campaigns
model Campaign {
  id                  String         @id @default(cuid())
  name                String
  description         String?
  status              CampaignStatus @default(DRAFT)
  channel             CampaignChannel @default(EMAIL) // Future: SMS, TELEGRAM
  
  // Targeting & Assignment
  targetTags          String[]       // Tag-based filtering
  minLeadScore        String?        // e.g., "WARM", "HOT"
  excludePrevious     Boolean        @default(true) // Exclude previously messaged
  
  // Scheduling & Limits
  startDate           DateTime?
  endDate             DateTime?
  dailySendLimit      Int            @default(150) // Daily sending limit
  sendingWindow       Json?          // {start: "09:00", end: "17:00", weekdaysOnly: true}
  timezone            String         @default("UTC")
  
  // Performance Tracking
  totalContacts       Int            @default(0)
  emailsSent          Int            @default(0)
  emailsDelivered     Int            @default(0)
  emailsOpened        Int            @default(0)
  emailsBounced       Int            @default(0)
  emailsReplied       Int            @default(0)
  
  // Calculated Metrics
  openRate            Float          @default(0)
  replyRate           Float          @default(0)
  bounceRate          Float          @default(0)
  
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  // Relationships
  userId              String
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps               CampaignStep[]
  contacts            CampaignContact[]
  events              CampaignEvent[]
  conversations       Conversation[]

  @@map("campaigns")
}

// Campaign Steps - email sequence management
model CampaignStep {
  id              String    @id @default(cuid())
  stepNumber      Int       // 1, 2, 3, etc.
  name            String    // "Initial Outreach", "Follow-up 1"
  delayDays       Int       @default(3) // Days after previous step
  isActive        Boolean   @default(true) // Can be toggled on/off
  
  // Email Content
  // Store subject/body directly for now to simplify execution
  subject         String
  body            String
  emailTemplateId String?
  emailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id], onDelete: SetNull)
  
  // Performance by Step
  sent            Int       @default(0)
  delivered       Int       @default(0)
  opened          Int       @default(0)
  replied         Int       @default(0)
  bounced         Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relationships
  campaignId      String
  campaign        Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, stepNumber])
  @@map("campaign_steps")
}

// Email Templates - reusable email content
model EmailTemplate {
  id            String    @id @default(cuid())
  name          String
  subject       String
  bodyHtml      String
  bodyText      String
  isAiGenerated Boolean   @default(false)
  variables     String[]  // ["firstName", "company", "linkedinUrl"]
  
  // Template Performance (across all uses)
  timesUsed     Int       @default(0)
  avgOpenRate   Float     @default(0)
  avgReplyRate  Float     @default(0)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaignSteps CampaignStep[]

  @@map("email_templates")
}

// Campaign Contacts - tracks which contacts are in which campaigns
model CampaignContact {
  id              String                @id @default(cuid())
  currentStep     Int                   @default(1) // Which step they're on
  status          CampaignContactStatus @default(PENDING)
  
  // Timeline Tracking
  addedAt         DateTime              @default(now())
  lastEmailSent   DateTime?
  nextEmailDue    DateTime?
  completedAt     DateTime? // When they finished the sequence
  
  // Engagement Metrics
  emailsSent      Int                   @default(0)
  emailsOpened    Int                   @default(0)
  emailsReplied   Int                   @default(0)
  lastOpenedAt    DateTime?
  lastRepliedAt   DateTime?

  // Relationships
  campaignId      String
  campaign        Campaign              @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contactId       String
  contact         Contact               @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([campaignId, contactId])
  @@map("campaign_contacts")
}

// Campaign Events - detailed activity tracking
model CampaignEvent {
  id                String            @id @default(cuid())
  eventType         CampaignEventType
  stepNumber        Int? // Which step this event relates to
  emailMessageId    String? // External email provider ID
  metadata          Json? // Additional event data
  timestamp         DateTime          @default(now())

  // Relationships
  campaignId        String
  campaign          Campaign          @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contactId         String
  contact           Contact           @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("campaign_events")
}

// Conversation model - for tracking email threads
model Conversation {
  id              String             @id @default(cuid())
  subject         String
  preview         String?
  status          ConversationStatus @default(SENT)
  priority        Priority           @default(MEDIUM)
  lastMessageAt   DateTime           @default(now())
  responseTime    Int?               // Hours to respond
  unreadCount     Int                @default(0)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relationships
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactId  String
  contact    Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  campaignId String?
  campaign   Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  messages   Message[]

  @@map("conversations")
}

// Message model - individual messages in conversations
model Message {
  id             String      @id @default(cuid())
  content        String
  direction      Direction   // INBOUND or OUTBOUND
  isRead         Boolean     @default(false)
  sentAt         DateTime    @default(now())
  deliveredAt    DateTime?
  openedAt       DateTime?
  emailMessageId String?     @unique // Legacy external email ID
  // Inbox sync additions
  source         MessageSource @default(CAMPAIGN)
  provider       EmailProvider?
  externalId     String?      // Provider message id
  threadKey      String?
  accountId      String?
  receivedAt     DateTime?
  createdAt      DateTime    @default(now())

  // Relationships
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  account        ConnectedEmailAccount? @relation(fields: [accountId], references: [id], onDelete: SetNull)

  @@unique([provider, externalId])
  @@map("messages")
}

// Sync state per connected account
model AccountSyncState {
  id               String        @id @default(cuid())
  userId           String
  accountId        String        @unique
  provider         EmailProvider
  isFullSyncEnabled Boolean     @default(false)
  excludedDomains  String[]     @default([])
  lastGmailHistoryId String?
  lastSyncedAt     DateTime?

  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  account          ConnectedEmailAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("account_sync_states")
}

enum MessageSource {
  CAMPAIGN
  MANUAL
  IMPORTED
}

// Analytics model - for tracking performance metrics
model Analytics {
  id               String   @id @default(cuid())
  date             DateTime @default(now()) @db.Date
  emailsSent       Int      @default(0)
  emailsOpened     Int      @default(0)
  emailsReplied    Int      @default(0)
  meetingsBooked   Int      @default(0)
  openRate         Float    @default(0)
  replyRate        Float    @default(0)
  meetingRate      Float    @default(0)
  avgResponseTime  Float?   // Hours

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("analytics")
}

// Webhook Event model - for logging and debugging Stripe webhooks
model WebhookEvent {
  id          String            @id @default(cuid())
  eventId     String            @unique // Stripe event ID
  eventType   String            // e.g., 'checkout.session.completed'
  status      WebhookStatus     @default(PENDING)
  rawPayload  Json              // Full Stripe event data
  errorMessage String?          // If processing failed
  handledAt   DateTime?         // When successfully processed
  createdAt   DateTime          @default(now())
  retryCount  Int               @default(0)

  @@map("webhook_events")
}

// Enums
enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum Plan {
  BASIC
  PRO
  AGENCY
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

enum ContactSource {
  MANUAL
  LINKEDIN
  EMAIL
  REFERRAL
  EVENT
  WEBSITE
  APOLLO
}

enum ContactStatus {
  COLD
  CONTACTED
  REPLIED
  INTERESTED
  MEETING_SCHEDULED
  CLOSED_WON
  CLOSED_LOST
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

enum ConversationStatus {
  SENT
  DELIVERED
  OPENED
  REPLIED
  BOUNCED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Direction {
  INBOUND
  OUTBOUND
}

enum WebhookStatus {
  PENDING
  SUCCESS
  FAILED
  RETRYING
}

// New Campaign System Enums
enum CampaignChannel {
  EMAIL
  SMS      // Future multi-channel support
  TELEGRAM // Future multi-channel support
}

enum CampaignContactStatus {
  PENDING           // Added to campaign but not started
  IN_PROGRESS       // Currently receiving emails
  COMPLETED         // Finished the sequence
  PAUSED           // Manually paused
  REPLIED          // Replied to an email (auto-paused)
  BOUNCED          // Email bounced (auto-paused)
  UNSUBSCRIBED     // Opted out
}

enum CampaignEventType {
  CONTACT_ADDED     // Contact assigned to campaign
  EMAIL_SENT        // Email dispatched
  EMAIL_DELIVERED   // Email successfully delivered
  EMAIL_OPENED      // Email opened by recipient
  EMAIL_CLICKED     // Link clicked in email
  EMAIL_REPLIED     // Reply received
  EMAIL_BOUNCED     // Email bounced
  EMAIL_UNSUBSCRIBED // Unsubscribe request
  CONTACT_PAUSED    // Contact manually paused
  CONTACT_COMPLETED // Contact finished sequence
}

// Rejected Lead model - for tracking leads excluded due to domain validation
model RejectedLead {
  id             String   @id @default(cuid())
  name           String?
  email          String
  company        String?
  position       String?
  source         String   // Source of the lead (APOLLO, LINKEDIN, etc.)
  domainStatus   String   // Reason for rejection: "parked", "does_not_resolve"
  rejectedAt     DateTime @default(now())
  
  // For analytics and QA
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rejected_leads")
}

// Waitlist Signup model - for capturing pre-launch signups
model WaitlistSignup {
  id        Int      @id @default(autoincrement())
  name      String?  // optional
  email     String   @unique
  source    String   @default("framer")
  createdAt DateTime @default(now())

  @@map("waitlist_signups")
}

// Connected Email Account model - for user's connected email providers
model ConnectedEmailAccount {
  id           String          @id @default(cuid())
  userId       String
  email        String          @unique
  provider     EmailProvider
  
  // OAuth2 tokens (Gmail, Outlook)
  accessToken  String?         // Encrypted
  refreshToken String?         // Encrypted
  expiresAt    DateTime?
  // Microsoft token cache for silent refresh
  msalCache    String?
  msalHomeAccountId String?
  
  // SMTP credentials
  smtpHost     String?
  smtpPort     Int?
  smtpUser     String?
  smtpPass     String?         // Encrypted
  
  // Status and metadata
  isActive     Boolean         @default(true)
  lastUsed     DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  
  // Relationships
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages     Message[]
  syncState    AccountSyncState?
  
  @@map("connected_email_accounts")
}

// Email Provider enum
enum EmailProvider {
  GMAIL
  OUTLOOK
  SMTP
}
